import React, { useState } from "react";
import * as mui from "@mui/material";
import {
  Download,
  Delete,
  ArrowUpward,
  ArrowDownward,
  Search,
} from "@mui/icons-material";

const RunList = ({ runs, isAdmin, onDelete, onDownload }) => {
  // anchorEl manages the position of the download menu
  const [anchorEl, setAnchorEl] = useState(null);

  const [selectedRunId, setSelectedRunId] = useState(null);
  const [sortConfig, setSortConfig] = useState({
    key: "createdAt",
    direction: "desc",
  });

  // used for filter runs by the username
  const [searchTerm, setSearchTerm] = useState("");

  const handleMenuOpen = (event, runId) => {
    setAnchorEl(event.currentTarget);
    setSelectedRunId(runId);
  };

  const handleMenuClose = () => {
    setAnchorEl(null);
    setSelectedRunId(null);
  };

  const handleDownload = (format) => {
    if (selectedRunId) {
      onDownload(selectedRunId, format);
    }
    handleMenuClose();
  };

  /**
   * handleSort
   * Toggles the sort direction for the specific column.
   */
  const handleSort = (key) => {
    setSortConfig((prevConfig) => ({
      key,
      direction:
        prevConfig.key === key && prevConfig.direction === "asc"
          ? "desc"
          : "asc",
    }));
  };

  /**
   * filteredRuns
   * Filters runs by username if ADMIN role.
   */
  const filteredRuns = runs.filter((run) =>
    run.user?.username?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  /**
   * sortedRuns
   * Sorts the filtered runs (by createdAt by default).
   */
  const sortedRuns = [...filteredRuns].sort((a, b) => {
    const order = sortConfig.direction === "asc" ? 1 : -1;

    if (sortConfig.key === "populationSize") {
      const aValue = a.populationSize || 0;
      const bValue = b.populationSize || 0;
      return (aValue - bValue) * order;
    }

    if (sortConfig.key === "createdAt") {
      const aDate = new Date(a.createdAt);
      const bDate = new Date(b.createdAt);
      return (aDate - bDate) * order;
    }

    return 0;
  });

  return (
    <>
      <mui.Box
        display="flex"
        justifyContent="space-between"
        alignItems="center"
        mb={2}
      >
        <mui.Typography variant="body1" color="text.secondary">
          Total Runs: {filteredRuns.length}
        </mui.Typography>

        {isAdmin && (
          <mui.TextField
            placeholder="Search by user"
            variant="outlined"
            size="small"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            sx={{
              maxWidth: 200,
              "& .MuiOutlinedInput-root": { borderRadius: "15px" },
            }}
            InputProps={{
              startAdornment: (
                <mui.InputAdornment position="start">
                  <Search />
                </mui.InputAdornment>
              ),
            }}
          />
        )}
      </mui.Box>

      <mui.Box>
        <mui.TableContainer>
          <mui.Table>
            <mui.TableHead>
              <mui.TableRow>
                <mui.TableCell
                  onClick={() => handleSort("createdAt")}
                  sx={{ cursor: "pointer" }}
                >
                  Creation Date
                  {sortConfig.key === "createdAt" &&
                    (sortConfig.direction === "asc" ? (
                      <ArrowUpward fontSize="small" />
                    ) : (
                      <ArrowDownward fontSize="small" />
                    ))}
                </mui.TableCell>

                <mui.TableCell
                  onClick={() => handleSort("populationSize")}
                  sx={{ cursor: "pointer" }}
                >
                  Population Size
                  {sortConfig.key === "populationSize" &&
                    (sortConfig.direction === "asc" ? (
                      <ArrowUpward fontSize="small" />
                    ) : (
                      <ArrowDownward fontSize="small" />
                    ))}
                </mui.TableCell>

                <mui.TableCell>Age</mui.TableCell>
                <mui.TableCell>Gender</mui.TableCell>
                <mui.TableCell>Location</mui.TableCell>
                {isAdmin && <mui.TableCell>Generated by</mui.TableCell>}

                {/* Action column */}
                <mui.TableCell align="center">Actions</mui.TableCell>
              </mui.TableRow>
            </mui.TableHead>
            <mui.TableBody>
              {sortedRuns.map((run) => (
                <mui.TableRow key={run.runId} hover>
                  <mui.TableCell>
                    {new Date(run.createdAt).toLocaleString()}
                  </mui.TableCell>
                  <mui.TableCell>{run.populationSize || 1}</mui.TableCell>
                  <mui.TableCell>
                    {`${run.minAge || "0"} - ${run.maxAge || "140"}`}
                  </mui.TableCell>
                  <mui.TableCell>{run.gender || "All"}</mui.TableCell>
                  <mui.TableCell>
                    {run.state
                      ? run.city
                        ? `${run.city}, ${run.state}`
                        : `All locations, ${run.state}`
                      : "All locations/Wien"}
                  </mui.TableCell>
                  {isAdmin && (
                    <mui.TableCell>
                      {run.user?.username || "Unknown"}
                    </mui.TableCell>
                  )}

                  <mui.TableCell align="center">
                    <mui.IconButton
                      onClick={(event) => handleMenuOpen(event, run.runId)}
                    >
                      <Download />
                    </mui.IconButton>
                    <mui.IconButton
                      sx={{
                        color: "red",
                        "&:hover": {
                          backgroundColor: "red",
                          color: "background.default",
                        },
                      }}
                      onClick={() => onDelete(run.runId)}
                    >
                      <Delete />
                    </mui.IconButton>
                  </mui.TableCell>
                </mui.TableRow>
              ))}
            </mui.TableBody>
          </mui.Table>
        </mui.TableContainer>
      </mui.Box>

      <mui.Menu
        anchorEl={anchorEl}
        open={Boolean(anchorEl)}
        onClose={handleMenuClose}
      >
        <mui.MenuItem onClick={() => handleDownload("csv")}>
          Download CSV
        </mui.MenuItem>
        <mui.MenuItem onClick={() => handleDownload("fhir")}>
          Download FHIR
        </mui.MenuItem>
      </mui.Menu>
    </>
  );
};

export default RunList;
